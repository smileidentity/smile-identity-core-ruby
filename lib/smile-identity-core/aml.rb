# frozen_string_literal: true

require 'json'
require 'typhoeus'
require_relative 'validations'

module SmileIdentityCore
  ##
  # The AML Check product allows you to perform due diligence on your customers by screening them against
  # global watchlists, politically exposed persons lists, and adverse media publications.
  # For more info visit https://docs.smileidentity.com/products/for-individuals-kyc/aml-check
  class Aml
    include Validations

    ###
    # Submit AML
    # @param [Hash] partner_params the options to create a message with.
    # @option opts [String] :job_type The job type, this should be 10
    # @option opts [String] :job_id A unique value generated by you to track jobs on your end.
    # @option opts [String] :user_id A unique value generated by you.
    def initialize(partner_id, api_key, sid_server)
      @partner_id = partner_id.to_s
      @api_key = api_key
      @sid_server = sid_server
      @url = if sid_server !~ URI::DEFAULT_PARSER.make_regexp
               SmileIdentityCore::ENV::SID_SERVER_MAPPING[sid_server.to_s]
             else
               sid_server
             end
    end

    # Submit AML
    # @param [Hash] partner_params the options to create a job with.
    # @option opts [String] :job_type The job type, this should be 10
    # @option opts [String] :job_id A unique value generated by you to track jobs on your end.
    # @option opts [String] :user_id A unique value generated by you.
    # @param [Hash] id_info
    # @option opts [String] :countries An array that takes the customer’s known nationalities in 2-character format
    # e.g. Nigeria is NG, Kenya is KE, etc
    # @option opts [String] :full_name The full name of the customer.
    # @option opts [String] :birth_year The customer’s year of birth, in the format yyyy
    def submit_job(partner_params, id_info, options = {})
      @partner_params = validate_partner_params(symbolize_keys(partner_params))
      @id_info = validate_id_info(symbolize_keys(id_info), [])
      @options = options

      if @partner_params[:job_type].to_i != JobType::AML
        raise ArgumentError, 'Please ensure that you are setting your job_type to 10 to query AML'
      end

      submit_requests
    end

    private

    def symbolize_keys(params)
      params.is_a?(Hash) ? params.transform_keys(&:to_sym) : params
    end

    def build_payload
      @payload = generate_signature
      @payload.merge!(@id_info)
      add_partner_info
      add_sdk_info
      @payload
    end

    def add_partner_info
      @payload[:partner_id] = @partner_id
      @payload[:partner_params] = @partner_params
      @payload.merge!(user_id: @partner_params[:user_id])
      @payload.merge!(job_id: @partner_params[:job_id])
    end

    def add_sdk_info
      @payload[:source_sdk] = SmileIdentityCore::SOURCE_SDK
      @payload[:source_sdk_version] = SmileIdentityCore::VERSION
    end

    def generate_signature
      SmileIdentityCore::Signature.new(@partner_id, @api_key).generate_signature
    end

    def submit_requests
      request = Typhoeus::Request.new(
        "#{@url}/aml",
        method: 'POST',
        headers: { 'Content-Type' => 'application/json' },
        body: build_payload.to_json
      )

      request.on_complete do |response|
        return response.body if response.success?

        raise "#{response.code}: #{response.body}"
      end
      request.run
    end

    alias setup_requests submit_requests
  end
end
